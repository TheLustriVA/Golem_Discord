#!/usr/bin/env Python3.9
import discord
from discord.ext import commands
import openai
import json

class Chatbot(commands.cog):
    """
    Define a Discord bot cog that accepts incoming messages from other users and uses OpenAI's text-davinci-001 model to respond using natural language.
    All incoming and outgoing messages must be saved to a json file so that the chatbot can use the class to learn from prior interactions.
    """
    def __init__(
        self,
        bot: commands.Bot,
        openai_api_key: str,
        json_file: str = "chatbot.json",
    ):
        """
        Initialize the chatbot cog with an OpenAI API key and a json file to save messages to.

        Parameters:
            bot (commands.Bot): The Discord bot object that this cog is attached to.
            openai_api_key (str): The OpenAI API key used to access the text-davinci-001 model.
            json_file (str): The name of the json file that will be used to save messages to. Defaults to "chatbot.json".

        Returns: None

        Raises: None

        """
        self._bot = bot  # type: commands.Bot
        self._openai = openai.OpenAI(openai_api_key)  # type: openai.OpenAI
        self._json_file = json_file  # type: str
        self.last_spoke_with = None

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
         """
         Listen for incoming messages from other users and respond using natural language generated by OpenAI's text-davinci-001 model if the message is not from a bot or the chatbot itself and does not start with a command prefix (e.g., !).

         Parameters:
            message (discord.Message): The incoming message object from another user in Discord that triggered this event listener function call.

         Returns: None

         Raises: None

         """
         
         # Check if the message is from a bot or the chatbot itself.
         if message.author.bot:
             return

         # Check if the message starts with a command prefix (e.g., !).
         if self._bot.user_has_any_role(message.author, *self._bot.command_prefix):
             return

         # Save the incoming message to a json file so that it can be used by OpenAI's text-davinci-001 model to generate a response using natural language.
         with open(self._json_file, "a") as f:
             json.dump({"text": message, "contact": message.author}, f)

         # Generate a response using OpenAI's text-davinci-001 model and send it back to the user who sent the original message in Discord.
         response = self._openai.Completion.create(engine="davinci", prompt=message.content, max_tokens=100, temperature=0, top_p=1)  # type: dict
         await message.channel.send(response["choices"][0]["text"])
         
         # set self.last_spoke_with as the user who was last sent a response
         self.last_spoke_with = message.author

    @commands.command()
    async def chat(self, ctx: commands.Context, *, message: str):
        """
        Send a message to the chatbot and receive a response using natural language generated by OpenAI's text-davinci-001 model.

        Parameters:
            ctx (commands.Context): The context object that contains information about the command invocation in Discord.
            message (str): The message to send to the chatbot for processing and responding to using natural language generated by OpenAI's text-davinci-001 model.

        Returns: None

        Raises: None

        """

        # Save the incoming message to a json file so that it can be used by OpenAI's text-davinci-001 model to generate a response using natural language.
        with open(self._json_file, "a") as f:
            json.dump({"text": message, "contact": message.author}, f)

        # Generate a response using OpenAI's text-davinci-001 model and send it back to the user who sent the original message in Discord.
        response = self._openai.Completion.create(engine="davinci", prompt=message, max_tokens=100, temperature=0, top_p=1)  # type: dict
        await ctx.send(response["choices"][0]["text"])
        
def setup(client):
    client.add_cog(Chatbot(client))